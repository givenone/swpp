'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _yeomanGenerator = require('yeoman-generator');

var _inquirerAutocompletePrompt = require('inquirer-autocomplete-prompt');

var _inquirerAutocompletePrompt2 = _interopRequireDefault(_inquirerAutocompletePrompt);

var _utils = require('../utils');

var _helpers = require('./helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _class = function (_Base) {
  _inherits(_class, _Base);

  function _class() {
    var _ref;

    _classCallCheck(this, _class);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = _class.__proto__ || Object.getPrototypeOf(_class)).call.apply(_ref, [this].concat(args)));

    _this.getComponents = function () {
      var _this$options = _this.options,
          ours = _this$options.ours,
          theirs = _this$options.theirs;

      var all = !ours && !theirs;
      var components = [];
      if (all || ours) {
        components.push.apply(components, _toConsumableArray((0, _helpers.findPascalPaths)(process.cwd()).map(_helpers.getInfoFromPascalPath)));
      }
      if (all || theirs) {
        components.push.apply(components, _toConsumableArray((0, _helpers.findPascalPaths)((0, _utils.defaultTemplatePath)('src/' + _this.type + 's'), 'src/' + _this.type + 's').map(function (path) {
          return (0, _helpers.getInfoFromPascalPath)(path, (0, _utils.branchUrl)());
        })));
      }
      return components;
    };

    _this.env.adapter.promptModule.registerPrompt('autocomplete', _inquirerAutocompletePrompt2.default);
    _this.option('ours');
    _this.option('theirs');
    _this.option('containers');
    _this.type = _this.options.containers ? 'container' : 'component';
    _this.components = _this.getComponents();
    return _this;
  }

  _createClass(_class, [{
    key: 'prompting',
    value: function prompting() {
      var _this2 = this;

      var choices = this.components.map(function (component) {
        return {
          name: component.name + ' ' + _chalk2.default.gray(component.url),
          short: component.name,
          value: component
        };
      });

      var prompts = [{
        type: 'autocomplete',
        name: 'component',
        message: 'Which ' + this.type + ' do you want to clone?',
        source: /* istanbul ignore next */function source(answers, input) {
          return Promise.resolve(input ? choices.filter(function (choice) {
            return choice.name.indexOf(input) >= 0;
          }) : choices);
        }
      }, {
        type: 'input',
        name: 'name',
        message: function message(_ref2) {
          var component = _ref2.component;
          return 'How do you want to name the ' + component.name + ' ' + _this2.type + '?';
        },
        default: function _default(_ref3) {
          var component = _ref3.component;
          return component.name;
        }
      }, {
        type: 'input',
        name: 'folder',
        message: function message(_ref4) {
          var name = _ref4.name;
          return 'In which folder do you want to put the ' + name + ' ' + _this2.type + '?';
        },
        default: function _default(_ref5) {
          var component = _ref5.component;
          return component.folder;
        }
      }];

      return this.prompt(prompts).then(function (answers) {
        _this2.answers = answers;
      });
    }
  }, {
    key: 'writing',
    value: function writing() {
      var _this3 = this;

      var _answers = this.answers,
          name = _answers.name,
          folder = _answers.folder,
          component = _answers.component;

      var isTheirs = component.url.indexOf('https') === 0;
      var templatePath = isTheirs ? _utils.defaultTemplatePath : this.destinationPath.bind(this);

      if (component.isDir) {
        (function () {
          var tPath = function tPath() {
            for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
              args[_key2] = arguments[_key2];
            }

            return templatePath.apply(undefined, [component.path].concat(args));
          };
          var dPath = function dPath() {
            for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
              args[_key3] = arguments[_key3];
            }

            return _this3.destinationPath.apply(_this3, [folder, name].concat(args));
          };
          var filePaths = (0, _utils.getFilePaths)(tPath());
          _this3.fs.copy(tPath(), dPath());

          filePaths.forEach(function (filePath) {
            var contents = _this3.fs.read(dPath(filePath));
            _this3.fs.write(dPath(filePath), (0, _helpers.replaceNameInPascalResource)(contents, component.name, name));

            if (filePath.indexOf(component.name) >= 0 && component.name !== name) {
              _this3.fs.move(dPath(filePath), dPath(filePath.replace(component.name, name)));
            }
          });
        })();
      } else {
        var _tPath = templatePath(component.path);
        var _dPath = this.destinationPath(folder, name + component.extension);
        this.fs.copy(_tPath, _dPath);
        var contents = this.fs.read(_tPath);
        this.fs.write(_dPath, (0, _helpers.replaceNameInPascalResource)(contents, component.name, name));
      }
    }
  }]);

  return _class;
}(_yeomanGenerator.Base);

exports.default = _class;
module.exports = exports['default'];