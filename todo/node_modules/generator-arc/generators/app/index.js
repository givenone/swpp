'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _yeomanGenerator = require('yeoman-generator');

var _utils = require('../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _class = function (_Base) {
  _inherits(_class, _Base);

  function _class() {
    _classCallCheck(this, _class);

    return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
  }

  _createClass(_class, [{
    key: 'prompting',
    value: function prompting() {
      var _this2 = this;

      var prompts = [{
        type: 'list',
        name: 'branch',
        message: 'What branch do you want your project to be based on?',
        choices: _utils.branchList.map(function (branch) {
          return {
            name: branch + ' (' + (0, _utils.branchUrl)(branch) + ')',
            value: branch,
            short: branch
          };
        })
      }];

      return this.prompt(prompts).then(function (_ref) {
        var branch = _ref.branch;

        _this2.branch = branch;
      });
    }
  }, {
    key: 'writing',
    value: function writing() {
      var _this3 = this;

      var ignoredPaths = ['src', 'src-clean', '.git'];
      var sources = _fs2.default.readdirSync((0, _utils.templatePath)(this.branch)).filter(function (source) {
        return ignoredPaths.indexOf(source) === -1;
      });

      sources.forEach(function (source) {
        _this3.fs.copy((0, _utils.templatePath)(_this3.branch, source), _this3.destinationPath(source), { dot: true });
      });

      this.fs.copy((0, _utils.templatePath)(this.branch, 'src-clean'), this.destinationPath('src'));
      try {
        this.fs.move(this.destinationPath('.npmignore'), this.destinationPath('.gitignore'));
      } catch (e) {}
    }
  }]);

  return _class;
}(_yeomanGenerator.Base);

exports.default = _class;
module.exports = exports['default'];