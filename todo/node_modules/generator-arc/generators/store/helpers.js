'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.replaceNames = exports.transformName = exports.getInfoFromStorePath = exports.findStorePaths = exports.getStorePath = undefined;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _pluralize = require('pluralize');

var _pluralize2 = _interopRequireDefault(_pluralize);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var basePath = 'src/store';

var getStorePath = exports.getStorePath = function getStorePath() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return _path2.default.join.apply(_path2.default, [basePath].concat(args));
};

var findStorePaths = exports.findStorePaths = function findStorePaths(cwd) {
  var storePath = _path2.default.join(cwd, getStorePath());
  if (_fs2.default.existsSync(storePath)) {
    return _fs2.default.readdirSync(storePath).filter(function (p) {
      return _fs2.default.statSync(_path2.default.join(storePath, p)).isDirectory();
    });
  }
  return [];
};

var getInfoFromStorePath = exports.getInfoFromStorePath = function getInfoFromStorePath(storePath, baseUrl) {
  return {
    name: storePath,
    url: baseUrl && baseUrl.replace ? baseUrl.replace(/\/$/, '') + '/' + basePath + '/' + storePath : getStorePath(storePath)
  };
};

var transformName = exports.transformName = function transformName(name) {
  var camel = _lodash2.default.camelCase(name);
  var pascal = _lodash2.default.upperFirst(camel);
  var camelPlural = (0, _pluralize2.default)(camel);
  var pascalPlural = (0, _pluralize2.default)(pascal);
  var constant = _lodash2.default.snakeCase(name).toUpperCase();
  return { camelPlural: camelPlural, pascalPlural: pascalPlural, camel: camel, pascal: pascal, constant: constant };
};

var replaceNames = exports.replaceNames = function replaceNames(contents, originalNames, names) {
  return contents.replace(new RegExp(originalNames.camelPlural, 'g'), names.camelPlural).replace(new RegExp(originalNames.pascalPlural, 'g'), names.pascalPlural).replace(new RegExp(originalNames.camel, 'g'), names.camel).replace(new RegExp(originalNames.pascal, 'g'), names.pascal).replace(new RegExp(originalNames.constant, 'g'), names.constant).replace(new RegExp('api.' + names.camel, 'g'), 'api.' + originalNames.camel);
};